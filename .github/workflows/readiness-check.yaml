name: Production Readiness Check

run-name: Readiness Check - ${{ github.ref_name }} by ${{ github.actor }}

on: [push]

jobs:
  critical-readiness-check:
    name: Run Critical Production Readiness Checks
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      # This asserts that the Auth Proxy is configured but
      # not that traffic is actually routed through it.
      # This is a blocking check.
      - name: Check Database Auth Proxy Configuration
        id: db_auth_proxy
        run: |
          if [[ "$(yq e '.database.useAuthProxy' ./helm/values-prod.yaml)" == "true" ]]; then
            echo "status=true" >> $GITHUB_OUTPUT
          else
            echo "status=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Autoscaler Configuration
        id: autoscaler
        run: |
          # Replace this with actual check logic
          echo "status=false" >> $GITHUB_OUTPUT

      - name: Check Liveness and Readiness Probes
        id: probes
        run: |
          # Replace this with actual check logic
          echo "status=false" >> $GITHUB_OUTPUT

      - name: Check Healthcheck Endpoint
        id: healthcheck
        run: |
          # Replace this with actual check logic
          echo "status=false" >> $GITHUB_OUTPUT

      - name: Automated Check Status
        id: overall_status
        run: |
          # Checks can be added here to become enforceable
          if [[
              "${{ steps.db_auth_proxy.outputs.status }}" == "false"
            ]]; then
            echo "status=FAILED" >> $GITHUB_OUTPUT
          else
            echo "status=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Create Markdown Content
        run: |
          cat << EOF > readiness.md
          # Production Readiness Checklist
          - **Triggered by:** ${{ github.actor }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}

          ## Production Readiness Checklist

          <details>
          <summary>Expand to view all checks (Status: ${{ steps.overall_status.outputs.status }})</summary>

          - [$([ "${{ steps.db_auth_proxy.outputs.status }}" == "true" ] && echo "x" || echo " ")] (Automated ðŸ¤– / Blocking) Database Auth Proxy configured
          - [$([ "${{ steps.sigterm_handling.outputs.status }}" == "true" ] && echo "x" || echo " ")] Container can handle SIGTERM signals gracefully
          - [$([ "${{ steps.autoscaler.outputs.status }}" == "true" ] && echo "x" || echo " ")] Pod Autoscaler configured
          - [$([ "${{ steps.probes.outputs.status }}" == "true" ] && echo "x" || echo " ")] Liveness and Readiness probes implemented
          - [$([ "${{ steps.healthcheck.outputs.status }}" == "true" ] && echo "x" || echo " ")] Healthcheck endpoint exposed

          </details>

          ---
          *This checklist was auto-generated by the Production Readiness Check workflow.*
          EOF

      - name: Update or Create Comment
        run: |
          if ! gh pr comment --edit-last --body-file readiness.md; then
            echo "No existing comment found. Creating a new comment."
            gh pr comment --body-file readiness.md
          fi

      - name: Check Overall Status
        if: steps.readiness_checks.outputs.OVERALL_STATUS == 'FAILED'
        run: |
          echo "One or more critical checks failed. Please review and address the issues."
          exit 1
